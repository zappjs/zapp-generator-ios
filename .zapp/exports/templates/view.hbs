//
//  {{{case name 'pascal'}}}ViewController.swift
//  {{{case appName 'pascal'}}}
//
{{#if author}}
//  Created by {{{author.name}}}.
{{/if}}
{{#if copyright}}
//  {{{copyright}}}
//
{{/if}}

import UIKit

class {{{case name 'pascal'}}}{{{case type 'pascal'}}}: UI{{{case type 'pascal'}}}{{#each dataSources}}, UI{{{case @key 'pascal'}}}DataSource{{/each}}{{#each delegates}}, UI{{{case @key 'pascal'}}}Delegate{{/each}} {
    {{#if props}}

    {{#each props}}
    var {{{@key}}}{{#if type}}: {{{json type 0}}}{{/if}}{{#if value}} = {{{json value 0}}}{{/if}}
    {{/each}}
    {{/if}}
    {{#if subviews}}

    {{#each subviews}}
    {{#eq type 'pageView'}}
    {{{indent (swiftProperties @key this type (case type 'pascal') true) 1 '    '}}}
    {{else}}
    {{{indent (swiftProperties @key this type (case type 'pascal')) 1 '    '}}}
    {{/eq}}
    {{/each}}
    {{/if}}

    override init({{#eq type 'tableViewCell'}}style: UITableViewCellStyle, reuseIdentifier: String?{{else}}frame: CGRect{{/eq}}) {
        super.init({{#eq type 'tableViewCell'}}style: style, reuseIdentifier: reuseIdentifier{{else}}frame: frame{{/eq}})
        {{#if view}}
        {{{indent (swiftValue 'self' view) 2 '    '}}}
        {{/if}}
        {{#each subviews}}
        {{#eq type 'pageView'}}
        {{{indent (swiftCreate @key this type (case type 'pascal') 'self.contentView' true) 2 '    '}}}
        {{else}}
        {{{indent (swiftCreate @key this type (case type 'pascal') 'self.contentView') 2 '    '}}}
        {{/eq}}
        {{/each}}
        {{#each subviews}}

        {{#eq type 'pageView'}}
        {{{indent (swiftValue @key this type (case type 'pascal') 'self.contentView' true) 2 '    '}}}
        {{else}}
        {{{indent (swiftValue @key this type (case type 'pascal') 'self.contentView') 2 '    '}}}
        {{/eq}}
        {{/each}}
        {{#if accessoryType}}

        self.accessoryType = .{{{accessoryType}}}
        {{/if}}
        {{#if dataSources}}
        {{#each dataSources}}
        {{#if objects}}

        // UI{{{case @key 'pascal'}}}DataSource objects
        {{#each objects}}
        {{{this}}}.dataSource = self
        {{/each}}
        {{/if}}
        {{/each}}
        {{/if}}
        {{#if delegates}}
        {{#each delegates}}
        {{#if objects}}

        // UI{{{case @key 'pascal'}}}Delegate objects
        {{#each objects}}
        {{{this}}}.delegate = self
        {{/each}}
        {{/if}}
        {{/each}}
        {{/if}}
        {{#if events.didLoad}}

        {{{indent (code events.didLoad) 2 '    '}}}
        {{/if}}
    }

    required init(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)!
    }
    {{#each dataSources}}

    // MARK: UI{{{case @key 'pascal'}}}DataSource events
    {{#each events}}

    {{#eq @../key 'collectionView'}}
    {{#eq @key 'cell'}}
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
    {{/eq}}
    {{#eq @key 'numberOfItems'}}
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
    {{/eq}}
    {{#eq @key 'numberOfSections'}}
    func numberOfSections(in collectionView: UICollectionView) -> Int {
    {{/eq}}
    {{/eq}}
    {{#eq @../key 'pageViewController'}}
    {{#eq @key 'presentationCount'}}
    func presentationCountForPageViewController(pageViewController: UIPageViewController) -> Int {
    {{/eq}}
    {{#eq @key 'presentationIndex'}}
    func presentationIndexForPageViewController(pageViewController: UIPageViewController) -> Int {
    {{/eq}}
    {{#eq @key 'viewControllerBefore'}}
    func pageViewController(_ pageViewController: UIPageViewController, viewControllerBefore viewController: UIViewController) -> UIViewController? {
    {{/eq}}
    {{#eq @key 'viewControllerAfter'}}
    func pageViewController(_ pageViewController: UIPageViewController, viewControllerAfter viewController: UIViewController) -> UIViewController? {
    {{/eq}}
    {{/eq}}
    {{#eq @../key 'tableView'}}
    {{#eq @key 'cell'}}
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
    {{/eq}}
    {{#eq @key 'numberOfRows'}}
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
    {{/eq}}
    {{#eq @key 'numberOfSections'}}
    func numberOfSections(in tableView: UITableView) -> Int {
    {{/eq}}
    {{#eq @key 'titleForFooter'}}
    func tableView(_ tableView: UITableView, titleForFooterInSection section: Int) -> String? {
    {{/eq}}
    {{#eq @key 'titleForHeader'}}
    func tableView(_ tableView: UITableView, titleForHeaderInSection section: Int) -> String? {
    {{/eq}}
    {{/eq}}
        {{{indent (code this) 2 '    '}}}
    }
    {{/each}}
    {{/each}}
    {{#each delegates}}

    // MARK: UI{{{case @key 'pascal'}}}Delegate events
    {{#each events}}

    {{#eq @../key 'collectionView'}}
    {{#eq @key 'didSelectItem'}}
    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
    {{/eq}}
    {{/eq}}
    {{#eq @../key 'tableView'}}
    {{/eq}}
        {{{indent (code this) 2 '    '}}}
    }
    {{/each}}
    {{/each}}

}
